// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logstream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LogStreamerClient is the client API for LogStreamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogStreamerClient interface {
	StreamLog(ctx context.Context, in *LogStreamRequest, opts ...grpc.CallOption) (*LogStreamResponse, error)
}

type logStreamerClient struct {
	cc grpc.ClientConnInterface
}

func NewLogStreamerClient(cc grpc.ClientConnInterface) LogStreamerClient {
	return &logStreamerClient{cc}
}

func (c *logStreamerClient) StreamLog(ctx context.Context, in *LogStreamRequest, opts ...grpc.CallOption) (*LogStreamResponse, error) {
	out := new(LogStreamResponse)
	err := c.cc.Invoke(ctx, "/logstream.LogStreamer/StreamLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogStreamerServer is the server API for LogStreamer service.
// All implementations must embed UnimplementedLogStreamerServer
// for forward compatibility
type LogStreamerServer interface {
	StreamLog(context.Context, *LogStreamRequest) (*LogStreamResponse, error)
	mustEmbedUnimplementedLogStreamerServer()
}

// UnimplementedLogStreamerServer must be embedded to have forward compatible implementations.
type UnimplementedLogStreamerServer struct {
}

func (UnimplementedLogStreamerServer) StreamLog(context.Context, *LogStreamRequest) (*LogStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamLog not implemented")
}
func (UnimplementedLogStreamerServer) mustEmbedUnimplementedLogStreamerServer() {}

// UnsafeLogStreamerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogStreamerServer will
// result in compilation errors.
type UnsafeLogStreamerServer interface {
	mustEmbedUnimplementedLogStreamerServer()
}

func RegisterLogStreamerServer(s grpc.ServiceRegistrar, srv LogStreamerServer) {
	s.RegisterService(&_LogStreamer_serviceDesc, srv)
}

func _LogStreamer_StreamLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStreamerServer).StreamLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logstream.LogStreamer/StreamLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStreamerServer).StreamLog(ctx, req.(*LogStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogStreamer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logstream.LogStreamer",
	HandlerType: (*LogStreamerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StreamLog",
			Handler:    _LogStreamer_StreamLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logstream.proto",
}
